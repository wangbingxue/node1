模块化
    -在node中，一个js文件就是一个模块
    -在node中，每一个js文件中的js代码都是独立运行在一个函数中的
        而不是全局作用域，所以一个模块中的变量和函数在其他模块中无法访问
    我可以通过exports来向外部暴露变量和方法
       只需要将需要暴露给外部的变量和方法设置为exports的属性即可
    引入其他模块
     /*在node通中，通过require（）函数来引入外部模块
              require()可以传递一个文件的路径作为参数，node降会自动根据路径来引入外部模块
            这里路径。如果使用相对路径，必须以.或..开头
            使用require()引入模块后该函数会返回一个对象，这个对象代表的是引入的模块
            我们使用require()引入外部模块时，使用的就是模块标识。我们可以通过模块标识来找到指定的模块
            -模块分成两大类
                 核心模块
                     -由node引擎提供的模块
                     -核心模块的表示就是，模块的名字var fs = require("fs");
                  文件模块
                      -由用户自己创建的模块
                      -文件模块的标识就是文件的路径（绝对路径，相对路径）
                      相对路径用.或..开头。
            */
             在node中有一个区局对象global，它的作用和网页中的window类似
                    在全局中创建的变量都会作为global的属性保存
                    在全局中创建的函数都会作为global的方法保存
                    当node在执行模块中的代码时，它会首先在代码的最顶部，添加如下代码
                    function (exports, require, module, __filename, __dirname) {
                    在代码的底部添加如下代码
                    }
                    实际上模块中的代码都是包装在一个函数中执行的，并且函数执行时，同时传递进5个实参
                    exports
                        - 该对象用来将变量或函数暴露到外部

                    require
                        - 函数，用来引入外部模块

                    module
                        -module代表的是当前模块本身
                        -export就是module的属性
                        -既可以用用exports导出，也可以用module.exports

                    __filename
                            -F:\WEB\node\1\01.node\04.module.js
                            -当前模块的完整路径
                    __dirname
                            -当前模块所在文件夹的路径

                     */
     exports和module.exports
                     -通过exports 只能使用 . 的方式来向外部暴露内部变量
                     exports.xxx= xxx

                     -而module.exports 既可以通过 .的形式，也可以直接赋值
                         module.exports.xxx = xxxx;
                         module.exports = {}

              */
     -npm的命令
         -npm -v 查看npm的版本
         -npm version  查看所有模块版本
         -npm search +包名  搜索包
         -npm install+包名   安装包
         -npm remove/r +包名 删除包
         -npm install +包名 --save******安装包并添加到依赖中
         -npm install 下载文件当前项目所依赖的包
         -npm install +包名 -g全局安装包（全局安装的包一般都是一些工具）